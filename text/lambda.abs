::: # Lambda calculus

::: Environ originally taken from `finseq_2`. Later, I added trees and orders.
environ

  ::: Vocabularies are basically for Mizar's lexer.
  vocabularies LAMBDA,
    FINSET_1,
    NUMBERS,
    NAT_1, XBOOLE_0, SUBSET_1, FINSEQ_1, XXREAL_0, CARD_1,
    ARYTM_1, ARYTM_3, TARSKI, ORDINAL4, FUNCOP_1,
    RELAT_2, RELAT_1,
    FUNCT_1, FUNCT_2,
    ZFMISC_1, PARTFUN1,
    ORDERS_2, ORDERS_1,
    FINSEQ_2, PBOOLE, CARD_3, VALUED_1,
    TREES_4, TREES_3, TREES_2, TREES_1;

  ::: Radix type specifications
  ::: But it also helped [175 unknown attribute format] error with [finite set]
  notations FINSET_1,
    TARSKI, XBOOLE_0, ENUMSET1, ZFMISC_1, SUBSET_1, ORDINAL1, CARD_1,
    NUMBERS, XCMPLX_0, DOMAIN_1, NAT_1, RELAT_1, PARTFUN1,
    RELAT_2, RELSET_1,
    FUNCT_1, FUNCT_2,
    FUNCT_3, FINSEQ_1, BINOP_1, PBOOLE, FUNCOP_1, CARD_3,
    TREES_4, TREES_3, TREES_2, TREES_1,
    ORDERS_1, ORDERS_2,
    XXREAL_0, VALUED_1,
    RECDEF_1;

  ::: For modes? (unknown mode format resolved)
  constructors RELAT_2, RELAT_1,
    PARTFUN1, BINOP_1, DOMAIN_1,
    FUNCT_1, FUNCT_2, FUNCT_3,
    FUNCOP_1,
    RELSET_1,
    SQUARE_1, NAT_1, FINSEQ_1, PBOOLE, CARD_3, VALUED_1, SETFAM_1,
    TREES_4, TREES_3, TREES_2, TREES_1,
    ORDERS_1, ORDERS_2,
    RECDEF_1,
    FINSET_1,
    ENUMSET1,
    WELLORD2;

  ::: Definition are for automatically unfolding predicates in the thesis you are proving
  definitions TARSKI,
    FUNCT_1, FUNCT_2,
    FINSEQ_1, CARD_1, PBOOLE, FUNCOP_1,
    ORDERS_1,
    TREES_4, TREES_3, TREES_2, TREES_1,
    XTUPLE_0;

  ::: Registrations are for clusters (showing that a type exists (is non-empty),
  :::  and automatically adding adjectives)
  registrations XBOOLE_0, SUBSET_1, ORDINAL1, PARTFUN1,
    RELAT_2, RELAT_1,
    FUNCT_1, FUNCT_2,
    FUNCOP_1, XXREAL_0, XREAL_0, NAT_1, FINSEQ_1, CARD_1, RELSET_1,
    PBOOLE, CARD_3,
    ORDERS_2,
    TREES_4, TREES_3, TREES_2, TREES_1,
    FINSET_1;

  ::: Load theorem en definition labels
  theorems FUNCOP_1, RELAT_1, TARSKI, FINSEQ_1, XTUPLE_0, FUNCT_1,
    TREES_4, TREES_3, TREES_2, TREES_1,
    XBOOLE_0, SUBSET_1, RELAT_2, ENUMSET1,
    CARD_1, CARD_2, CARD_3, CARD_4;

  schemes RECDEF_1;

  requirements BOOLE, SUBSET, NUMERALS, ARITHM, REAL;

begin

::: ## Syntax and behaviour

reserve T,T1,T2 for Tree,
        D for DecoratedTree,
        p,q,r for FinSequence of NAT,
        x,y,X,Y for set;

::: ### Lambda terms

::: A _lambda term_ is identified with it's AST (abstract
:::  syntax tree). More precisely, we identify a lambda term
:::  with a finite decorated tree.
::: The nodes of the tree denote either application, abstraction
:::  or a variable. Using _De Bruijn_ variable indexing, we decorate
:::  variables with their De Bruijn index (a natural nuber). Note
:::  that we needn't explicitly annotate the type of a node,
:::  as the three types of nodes differ in how many children they must
:::  have: an application always has two children, an abstraction but one,
:::  and variables don't have any. So it suffices to decorate application
:::  and abstraction nodes with some default value (say, $0$).

::: In Mizar, a `Tree` is a non-empty subset of `NAT*`, so a set of finite
:::  sequences of natural numbers, such that certain logical properties hold.
::: Every such sequence denotes a node in the tree, and can be interpreted
:::  as a _path specification_ (how to get there, from the top). We see, then,
:::  that lambda term trees are a specific subset of general trees, in which
:::  only finite sequences of $\\{0,1\\}$ are used to denote nodes, nodes
:::  with children are decorated with a $0$, and is also finite in height.
::: By _decorating_ a node `r` with a number `n`, we mean that `M.r = n`.
::: Here `M` is the `DecoratedTree of NAT` which represents the lambda term.

definition
  let D;

  attr D is LambdaTerm-like means
:: LAMBDA:def 1

    dom D is finite &
    for r st r in dom D holds
      r is FinSequence of {0,1} &
      (r^<*0*> in dom D implies D.r = 0);
end;

::: Some simple `LambdaTerm-like` things.

::: TODO: some more of these simple trees, for easy usage
:::  later on, when defining application and abstraction.

registration
  cluster { {} } --> 0 -> LambdaTerm-like;
end;

registration
  cluster { <*> NAT } -> Tree-like;
end;

registration
  cluster { <*> NAT } --> 0 -> LambdaTerm-like;
end;

registration
  cluster { {}, <*0*> } -> Tree-like;
end;

registration
  cluster { {}, <*0*> } --> 0 -> LambdaTerm-like;
end;

registration
  cluster { {}, <*0*>, <*1*> } -> Tree-like;
end;

registration
  cluster { {}, <*0*>, <*1*> } --> 0 -> LambdaTerm-like;
end;

::: And then we can easily define a `LambdaTerm-like` cluster,
:::  and make a mode `LambdaTerm` out of it.
registration
  cluster LambdaTerm-like for DecoratedTree of NAT;
end;

definition
  mode LambdaTerm is LambdaTerm-like DecoratedTree of NAT;
end;

definition
  func PreAbstractionTerm -> LambdaTerm equals
:: LAMBDA:def 2
    { {}, <*0*> } --> 0;
end;

definition
  func PreApplicationTerm -> LambdaTerm equals
:: LAMBDA:def 3
    { {}, <*0*>, <*1*> } --> 0;
end;

reserve M,N,P,Q for LambdaTerm;

::: #### Preservation under operations

::: `LambdaTerm`s are preserved under taking subterms, and composing
:::  terms. We'll register this knowledge in the type system.

::: Let Mizar know that `M|r` is also a `LambdaTerm`.
::: The definition of `|` that we are using is the definition
:::  that operates on (and returns) a `DecoratedTree`. Showing
:::  that retricting a `LambdaTerm` produces a `LambdaTerm-like`
:::  result ensures us that the result is a `LambdaTerm`.
registration
  let M be LambdaTerm,
      r be Element of dom M;

  cluster M|r -> LambdaTerm-like;
end;

::: Let Mizar know that `P with-replacement (p,Q)` is also a `LambdaTerm`.
::: First we prove a slightly more general theorem about the ranges of
:::  composed `DecoratedTree`s, and add this knowledge to the type system.
reserve X for set,
        D1,D2 for DecoratedTree,
        p for Element of dom D1;

theorem :: LAMBDA:1
  D1 is X-valued & D2 is Y-valued implies
    D1 with-replacement (p,D2) is (X \/ Y)-valued;

registration
  let P,Q be LambdaTerm,
      p be Element of dom P;

  cluster P with-replacement (p,Q) -> NAT-valued;
end;

reserve R for DecoratedTree,
        p for Element of dom P;

theorem :: LAMBDA:2
  P with-replacement (p,Q) is LambdaTerm-like;

registration
  let P,Q be LambdaTerm,
      p be Element of dom P;

  cluster P with-replacement (p,Q) -> LambdaTerm-like;
end;

definition
  let P be LambdaTerm,
      p be Element of dom P,
      Q be LambdaTerm;

  redefine func P with-replacement (p,Q) -> LambdaTerm;
end;

::: ### Helper definitions
::: Some helper definitions for working with lambda terms.

::: #### Variable occurences
definition
  let M,r;

  pred r is_variable_in M means
:: LAMBDA:def 4
    not r^<*0*> in dom M;

  pred r is_abstraction_in M means
:: LAMBDA:def 5
    r^<*0*> in dom M & not r^<*1*> in dom M;

  pred r is_application_in M means
:: LAMBDA:def 6
    r^<*0*> in dom M & r^<*1*> in dom M;
end;

::: By $r$ being an _active variable_ of some term $M$ (or more precisely,
:::  a path identifying an active variable), I mean that if $\lambda M$ were
:::  to be applied to some other term $N$, we would substitute this variable
:::  by $M$.
definition
  let M,r;

  pred r is_active_variable_in M means
:: LAMBDA:def 7
    r is_variable_in M &
    M.r = card { p where p is Element of dom M
                 : p is_a_proper_prefix_of r &
                   p is_abstraction_in M };
end;

::: #### Abstraction and application

::: Then we can define abstraction and application
definition
  let M;

  func Abs(M) -> LambdaTerm means
:: LAMBDA:def 8
    it|<*0*> = M & not <*1*> in dom it;
::>        *4
end;

definition
  let M,N;

  func App(M,N) -> LambdaTerm means
:: LAMBDA:def 9
    it|<*0*> = M & it|<*1*> = N;
::>        *4
end;

definition
  let M,N;

  func SubstituteActiveVar(M,N) -> LambdaTerm means
:: LAMBDA:def 10
    :: most things are the same,
    (for r st not (ex p being Element of dom N
                      st p is_active_variable_in N & p is_a_prefix_of r)
           holds [r,x] in it iff [r,x] in N
    ) &
    :: except that the active variables are replaced with M
    (for r being Element of dom N
            st r is_active_variable_in N
            holds it|r = M);
::>        *4
end;

::: ### Reduction and conversion

::: First I define _shallow_ one-step beta substitution, which only
:::  states (the De Bruijn equivalent of)
:::  $(\\lambda x.N)M \\to_{\\beta} N[x:=M]$.

definition
  let P,Q;

  :: P === (\x.N)M --> N[x:=M] === Q
  pred P beta_shallow Q means
:: LAMBDA:def 11
    ex M,N st
      :: P === (\x.N)M
      P = App(Abs(N),M) &

      :: Q === N[x:=M]
      Q = SubstituteActiveVar(N,M);
end;
::: Then we extend this ordinary one-step beta reduction, that is,
:::  any subterm is also allowed to reduce.

::: Note that I had to use a work-around here, where I have two
:::  set-theoretically identical elements `p` and `q`, but considered
:::  in Mizar as having different types to enable the two `|` operations
:::  to work. I also tried defining something like `Element of (dom M),(dom N)`,
:::  but this is extremely difficult, if not impossible.
definition
  let M,N;

  pred M beta N means
:: LAMBDA:def 12
    ex
      p being Element of dom M,
      q being Element of dom N st
        p = q &
        M|p beta_shallow N|q &
        for q st not p is_a_prefix_of q holds
          [r,x] in M iff [r,x] in N;
end;

::: We close the relation under transitivity and reflexivity
:::  to get the full beta reduction relation.
definition
  let M,N;

  pred M beta* N means
:: LAMBDA:def 13
    M = N or
    ex P st M beta P & P beta N;
end;

::: And then close under symmetry to get beta conversion.
definition
  let M,N;

  pred M beta= N means
:: LAMBDA:def 14
    M beta* N or N beta* M;
end;

::: ## CPO's

reserve x,y,z,z2 for set;

::: We start off by defining
:::  a mode for partial orders upon some set `D`. I don't really
:::  get why de Mizar guys wrote their order definitions the way
:::  they did (in `ORDERS_1`, `ORDERS_2`, etc...)

definition
  let D be set;
  mode PartialOrder of D is transitive reflexive antisymmetric (Relation of D);
end;

::: ### (Least) upper bounds

::: An element $u$ of $D$ is an _upper bound_ of a
:::  subset $X\\subseteq D$ iff for all $x\\in X$,
:::  $x\\sqsubseteq u$.

::: I often encountered \*100 errors (also elsewhere, but most notably)
:::  here. Note: a \*100 error occurs when not all loci (which are variables
:::  introduced by the `let` statement) are used _in the attribute name_.
::: "Transitive" usage _is_ allowed: in the below definition of
:::  upper bounds, the variable `D` is not explicitly stated in the name
:::  of the attribute, however it is used in the `let` introduction rule of
:::  `R`, `X` and `u`, so it is allowed.
::: However, I had to explicitly add `R` to the attribute name, because even
:::  though it is used in the defining formula, it is not included in the
:::  introductory rules of `D`, `X` or `u`.
definition
  let D be set,
      R be PartialOrder of D,
      X be Subset of D,
      u be Element of D;

  attr u is X,R-ub means
:: LAMBDA:def 15
    for x st x in X holds [x,u] in R;
end;

::: Least upper bounds
definition
  let D be set,
      R be PartialOrder of D,
      X be Subset of D,
      u be Element of D;

  attr u is X,R-lub means
:: LAMBDA:def 16
    u is X,R-ub &
    for u2 being Element of D st u2 is X,R-ub holds
      [u,u2] in R;
end;

::: ### Directed sets

::: If $D$ is a set, and $R$ a partial order on $D$,
:::  then an $X\\subseteq D$ is called _directed_ iff
:::  for all $x,y \\in X$, there is some $z \\in X$,
:::  such that $x\\sqsubseteq z$ and $y\\sqsubseteq z$.
definition
  let D be set,
      R be PartialOrder of D,
      X be Subset of D;

  attr X is R-directed means
:: LAMBDA:def 17
    for x,y st x in X & y in X holds
      ex z st
        z in X & [x,z] in R & [y,z] in R;
end;

::: this registration is actually useless..
registration
  let D be set,
      R be PartialOrder of D;

  cluster R-directed for Subset of D;
end;

registration
  let D be non empty set,
      R be PartialOrder of D;

  cluster R-directed for non empty Subset of D;
end;

::: ### Completeness

::: A partial ordered set is complete iff every directed set has
:::  a least upper bound.
definition
  let D be non empty set,
      R be PartialOrder of D;

  attr R is complete means
:: LAMBDA:def 18
    for X being R-directed non empty Subset of D holds
      ex u being Element of D st u is X,R-lub;
end;

::: Here again, what I want to express is that such complete partial
:::  orders exist, not that for every $D$, any partial order is $D$-complete,
:::  or something weird like that...
:::
::: What are the precise semantics of these clusters?
registration
  let D be non empty set;

  cluster complete for PartialOrder of D;
end;

definition
  let D be non empty set,
      R be complete PartialOrder of D,
      X be R-directed Subset of D;

  func LUB(X) -> Element of D means
:: LAMBDA:def 19
    it is X,R-lub;
::>        *4
end;

::: ### Bottom element
definition
  let D be set,
      R be PartialOrder of D,
      b be Element of D;

  attr b is R-bottom means
:: LAMBDA:def 20
    for y st y in D holds [b,y] in R;
end;

registration
  let D be set,
      R be PartialOrder of D;

  cluster R-bottom for Element of D;
::>       *4
end;

::: ### The CPO structure
definition
  struct CPO (#
    carrier -> non empty set,
    BinRel -> complete PartialOrder of (the carrier),
    Bot -> (the BinRel)-bottom Element of the carrier
  #);
end;

::: ### Continuity
::: #### Monotonicity
definition
  let D,E be CPO,
      f be Function of (the carrier of D),(the carrier of E);

  attr f is monotone means
:: LAMBDA:def 21
    for x,y st [x,y] in (the BinRel of D) holds
      [f.x,f.y] in (the BinRel of E);
end;

::: #### Continuity
definition
  let D,E be CPO,
      f be Function of (the carrier of D),(the carrier of E);

  attr f is continuous means
:: LAMBDA:def 22
    f is monotone &
    for X being (the BinRel of D)-directed
                Subset of (the carrier of D)
      holds
        f.LUB(X) = LUB(f.:X);
::>                  *103
::                 This is indeed somewhat complicated,
::                  why would it necessarily be directed,
::                  and thus eligible for LUB ?
end;

registration
  let D,E be CPO;

  cluster continuous for Function of (the carrier of D),(the carrier of E);
::>       *4
end;

definition
  let D,E be CPO;

  mode ContinuousFunc of D,E is continuous Function of
    (the carrier of D),(the carrier of E);
end;

::: #### Continuous function space
definition
  let D,E be CPO;

  func ContinuousFuncs(D,E) -> set means
:: LAMBDA:def 23
    x in it iff x is ContinuousFunc of D,E;
::>        *4
end;

definition
  let D,E be CPO,
      f,g be ContinuousFunc of D,E;

  pred f piecewise_le g means
:: LAMBDA:def 24
    for x being Element of D holds
      [f.x, g.x] in (the BinRel of E);
end;

theorem :: LAMBDA:3
  for D,E being CPO holds
    CPO(# ContinuousFuncs(D,E),
          { [f,g] where f,g is ContinuousFunc of D,E : f piecewise_le g },
          {} #) is CPO;

::: #### The powerset CPO
definition
  let A be non empty set;

  func SubsetRelation(A) -> Relation of bool A means
:: LAMBDA:def 25
    [x,y] in it iff x is Subset of y;
::>        *4
end;

theorem :: LAMBDA:4
  for A being non empty set holds
    CPO(# bool A, SubsetRelation(A), {} #) is CPO;



::: ## Graph Models

definition
  let Bn be non empty set;
  func BnNext(Bn) -> set equals
:: LAMBDA:def 26
Bn \/ [: Bn*, Bn :];
end;

definition
  let A be non empty set;
  func Web(A) -> set equals
:: LAMBDA:def 27
A;
end;

theorem :: LAMBDA:5
  for A being non empty set holds
    id Web(A) is one-to-one;

::: Doesn't there already exist a notation for the set of all
:::  finite subsets of a set in Mizar ?!
definition
  let B be set;

  func (B)^<w -> set equals
:: LAMBDA:def 28
    { X where X is Subset of B : X is finite };
end;

definition
  let B be set;

  redefine func (B)^<w -> set means
:: LAMBDA:def 29
    X in it iff X c= B & X is finite;
end;

::: This is true if one assumes the axiom of choice, and
:::  then still it might be a bit complicated to give a proof.
::: (First show that `B` can be well-ordered, then define a
:::  well-order on `[:B^<w,B:]`, so that these two well-orders
:::  become isomorphic..?)
registration
  let B be infinite set;
  cluster one-to-one for Function of [:B^<w,B:],B;
end;

::: Easier, and probably good enough for our purposes, is to prove
:::  this version, where we only prove it for countable sets.
registration
  let B be countable infinite set;
  cluster one-to-one for Function of [:B^<w,B:],B;
end;

:: Graph models
definition
  struct GraphModel (#
    carrier -> infinite set,
    c -> one-to-one (Function of
      [:(the carrier)^<w, the carrier:], the carrier)
  #);
end;


::>
::> 1: It is not true
::> 4: This inference is not accepted
::> 56: Disagreement of types
::> 103: Unknown functor
::> 105: Illegal projection
