::: # Lambda calculus

::: Original files:
:::  [.abs](text/lambda.abs),
:::  [.miz](text/lambda.miz),
:::  [.voc](dict/lambda.voc)

::: @TOC

::: TODO note how we almost never work by inductive/recursive means,
:::  in constract with, say, Coq.

:: Environ originally taken from `finseq_2`. Later, I added trees and orders.
environ

  :: Vocabularies are basically for Mizar's lexer.
  vocabularies LAMBDA,
    FINSET_1,
    NUMBERS,
    NAT_1, XBOOLE_0, SUBSET_1, FINSEQ_1, XXREAL_0, CARD_1,
    ARYTM_1, ARYTM_3, TARSKI, ORDINAL4, FUNCOP_1,
    RELAT_2, RELAT_1,
    FUNCT_1, FUNCT_2,
    ZFMISC_1, PARTFUN1,
    ORDERS_2, ORDERS_1,
    FINSEQ_2, FINSEQ_4, PBOOLE, CARD_3, VALUED_1,
    TREES_1, TREES_2, TREES_3, TREES_4;
  
  :: Radix type specifications
  :: But it also helped [175 unknown attribute format] error with [finite set]
  notations FINSET_1,
    TARSKI, XBOOLE_0, ENUMSET1, ZFMISC_1, SUBSET_1, ORDINAL1, CARD_1,
    NUMBERS, XCMPLX_0, DOMAIN_1, NAT_1, RELAT_1, PARTFUN1,
    RELAT_2, RELSET_1,
    FUNCT_1, FUNCT_2,
    FUNCT_3, FINSEQ_1, FINSEQ_2, BINOP_1, PBOOLE, FUNCOP_1, CARD_3,
    TREES_1, TREES_2, TREES_3, TREES_4,
    ORDERS_1, ORDERS_2,
    XXREAL_0, VALUED_1,
    RECDEF_1;

  :: For modes? (unknown mode format resolved)
  constructors RELAT_2, RELAT_1,
    PARTFUN1, BINOP_1, DOMAIN_1,
    FUNCT_1, FUNCT_2, FUNCT_3,
    FUNCOP_1,
    RELSET_1,
    SQUARE_1, NAT_1, FINSEQ_1, FINSEQ_2, PBOOLE, CARD_3, VALUED_1, SETFAM_1,
    TREES_1, TREES_2, TREES_3, TREES_4,
    ORDERS_1, ORDERS_2,
    RECDEF_1,
    FINSET_1,
    ENUMSET1,
    WELLORD2;

  :: Definition are for automatically unfolding predicates
  ::  in the thesis you are proving
  definitions TARSKI,
    FUNCT_1, FUNCT_2,
    FINSEQ_1, CARD_1, PBOOLE, FUNCOP_1,
    ORDERS_1,
    TREES_1, TREES_2, TREES_3, TREES_4,
    ::XTUPLE_0;
    MCART_1; ::, FUNCT_5, RECDEF_1;

  :: Registrations are for clusters (showing that a type exists (is non-empty),
  ::  and automatically adding adjectives)
  registrations XBOOLE_0, SUBSET_1, ORDINAL1, PARTFUN1,
    ::RELAT_2,
    RELAT_1,
    FUNCT_1, FUNCT_2,
    FUNCOP_1, XXREAL_0, XREAL_0, NAT_1, FINSEQ_1, FINSEQ_2, CARD_1, RELSET_1,
    PBOOLE, CARD_3,
    ORDERS_2,
    TREES_1, TREES_2, TREES_3, TREES_4,
    FINSET_1;

  :: Load theorem en definition labels
  theorems FUNCOP_1, RELAT_1, TARSKI, FINSEQ_1, FINSEQ_2,
    ::XTUPLE_0,
    MCART_1, FUNCT_5, :: RECDEF_1,
    FUNCT_1,
    TREES_1, TREES_2, TREES_3, TREES_4,
    XBOOLE_0, SUBSET_1, RELAT_2, ENUMSET1,
    CARD_1, CARD_2, CARD_3, CARD_4;
  
  schemes RECDEF_1, TREES_2, TREES_4;

  requirements BOOLE, SUBSET, NUMERALS, ARITHM, REAL;

begin

::: ## Syntax and behaviour

definition
  mode Variable is Element of NAT;
end;

reserve T,T1,T2 for Tree,
        D,D2 for DecoratedTree,
        p,q,q0,q1,q2,r for FinSequence of NAT,
        x,y,X,Y for set,
        i,j,k,l,m,n for Element of NAT,
        u,v,w for Variable;

::: ### Lambda terms

::: A _lambda term_ is identified with it's AST (abstract
:::  syntax tree). More precisely, we identify a lambda term
:::  with a finite decorated tree.
::: The nodes of the tree denote either application, abstraction
:::  or a variable. Using _De Bruijn_ variable indexing, we decorate
:::  variables with their De Bruijn index (a natural nuber). Note
:::  that we needn't explicitly annotate the type of a node,
:::  as the three types of nodes differ in how many children they must
:::  have: an application always has two children, an abstraction but one,
:::  and variables don't have any. So it suffices to decorate application
:::  and abstraction nodes with some default value (say, $0$).

::: In Mizar, a `Tree` is a non-empty subset of `NAT*`, so a set of finite
:::  sequences of natural numbers, such that certain logical properties hold.
::: Every such sequence denotes a node in the tree, and can be interpreted
:::  as a _path specification_ (how to get there, from the top). We see, then,
:::  that lambda term trees are a specific subset of general trees, in which
:::  only finite sequences of $\\{0,1\\}$ are used to denote nodes, nodes
:::  with children are decorated with a $0$, and is also finite in height.
::: By _decorating_ a node `r` with a number `n`, we mean that `M.r = n`.
::: Here `M` is the `DecoratedTree of NAT` which represents the lambda term.

definition
  let D;
  
  attr D is LambdaTerm-like means
    :Def1:
    dom D is finite &
    for r st r in dom D holds
      r is FinSequence of {0,1} &
      ((r^<*0*> in dom D & r^<*1*> in dom D)
          implies D.r = 0);
end;

::: Some simple `LambdaTerm-like` things.

::: TODO: some more of these simple trees, for easy usage
:::  later on, when defining application and abstraction.

registration
  let v;
  
  cluster { {} } --> v -> LambdaTerm-like;
  coherence
  proof
    set D = { {} } --> v;
    dom D = { {} } by FUNCOP_1:13;
    hence dom D is finite;
    let r be FinSequence of NAT;
    assume
  A1: r in dom D;
    dom D = { {} } by FUNCOP_1:13;
    then
  A5: r = {} by A1, TARSKI:def 1;
    then r = <*> {0,1} by FINSEQ_1:def 6;
    hence r is FinSequence of {0,1};
    assume r^<*0*> in dom D;
    set r1 = r^<*1*>;
    assume
  A2: r1 in dom D;
    thus D.r = 0
    proof
      assume not thesis;
      r1 = {} by A2, TARSKI:def 1;
      then
    A3: r1 is empty;
    A4: r1 = <*1*> by A5, FINSEQ_1:34;
      then r1 is non empty;
      then not r1 is empty;
      hence contradiction by A3;
    end;
  end;
end;

registration
  cluster { <*> NAT } -> Tree-like;
  coherence
  proof
    { <*> NAT } = { {} } by FINSEQ_1:def 6;
    thus { <*> NAT } is Tree-like;
  end;
end;

registration
  let v;
  
  cluster { <*> NAT } --> v -> LambdaTerm-like;
  coherence
  proof
    { <*> NAT } = { {} } by FINSEQ_1:def 6;
    thus { <*> NAT } --> v is LambdaTerm-like;
  end;
end;

registration
  cluster { {}, <*0*> } -> Tree-like;
  coherence
  proof
    set T = { {}, <*0*> };
    T = elementary_tree 1 by TREES_1:51;
    then reconsider T as Tree;
    T is Tree-like;
    hence { {}, <*0*> } is Tree-like;
  end;
end;

registration
  let v;

  cluster { {}, <*0*> } --> v -> LambdaTerm-like;
  coherence
  proof
    set T = { {}, <*0*> };
  A6: T is finite;
    set D = T --> v;
  A2: dom D = T by FUNCOP_1:13;
    hence dom D is finite by A6;
    reconsider T as Tree;
    let r be FinSequence of NAT;
    assume
  A1: r in dom D;
    then
  A3: r = {} or r = <*0*> by A1, A2, TARSKI:def 2;
    per cases;
    suppose
    A7: r = {};
      then r = <*> {0,1} by FINSEQ_1:def 6;
      hence r is FinSequence of {0,1};
      assume r^<*0*> in dom D;
      set r1 = r^<*1*>;
      assume
    A9: r1 in dom D;
      thus D.r = 0
      proof
        assume not thesis;
      A8: r1 = <*1*> by A7, FINSEQ_1:34;
        then r1 is non empty;
        then
      A11: not r1 is empty;
      A10: r1 = {} or r1 = <*0*> by A1, A2, A9, TARSKI:def 2;
        not r1 = {}
        proof
          assume r1 = {};
          then r1 is empty;
          hence contradiction by A11;
        end;
        then r1 = <*0*> by A10;
        then
      A12: r1.1 = 0 by FINSEQ_1:40;
        r1.1 = 1 by A8, FINSEQ_1:40;
        hence contradiction by A12;
      end;
    end;
    suppose
    A5: not r = {};
      set ZeroOne = {0,1};
      reconsider ZeroOne as non empty set;
      set Zero = 0;
      Zero in {0,1} by TARSKI:def 2;
      then reconsider Zero as Element of ZeroOne;
    A4: <*Zero*> is FinSequence of ZeroOne;
    A18: r = <*0*> by A3, A5
       .= <*Zero*>;
      hence r is FinSequence of {0,1} by A4;
      assume r^<*0*> in dom D;
      set r1 = r^<*1*>;
      assume
    A13: r1 in dom D;
      thus D.r = 0
      proof
        assume not thesis;
      A14: r1 = <*0,1*> by A18, A4, FINSEQ_1:def 9;
        then r1 is non empty;
        then
      A15: not r1 is empty;
      A16: r1 = {} or r1 = <*0*> by A1, A2, A13, TARSKI:def 2;
        not r1 = {}
        proof
          assume r1 = {};
          then r1 is empty;
          hence contradiction by A15;
        end;
        then r1 = <*0*> by A16;
        then
      A17: len r1 = 1 by FINSEQ_1:40;
        len r1 = 2 by A14, FINSEQ_1:44;
        hence contradiction by A17;
      end;
    end;
  end;
end;

registration
  cluster { {}, <*0*>, <*1*> } -> Tree-like;
  coherence
  proof
    set T = { {}, <*0*>, <*1*> };
    T = elementary_tree 2 by TREES_1:53;
    then reconsider T as Tree;
    T is Tree-like;
    hence { {}, <*0*>, <*1*> } is Tree-like;
  end;
end;

registration
  cluster { {}, <*0*>, <*1*> } --> 0 -> LambdaTerm-like;
  coherence
  proof
    set T = { {}, <*0*>, <*1*> };
  A6: T is finite;
    set D = T --> 0;
  A2: dom D = T by FUNCOP_1:13;
    hence dom D is finite by A6;
    reconsider T as Tree;
    let r be FinSequence of NAT;
    assume
  A1: r in dom D;
    then
  A3: r = {} or r = <*0*> or r = <*1*> by A1, A2, ENUMSET1:def 1;
    per cases;
    suppose r = {};
      then r = <*> {0,1} by FINSEQ_1:def 6;
      hence r is FinSequence of {0,1};
      assume r^<*0*> in dom D;
      assume r^<*1*> in dom D;
      thus D.r = 0 by A1, FUNCOP_1:7;
    end;
    suppose
    A5: r = <*0*>;
      set ZeroOne = {0,1};
      reconsider ZeroOne as non empty set;
      set Zero = 0;
      Zero in {0,1} by TARSKI:def 2;
      then reconsider Zero as Element of ZeroOne;
    A4: <*Zero*> is FinSequence of ZeroOne;
      r = <*0*> by A5
       .= <*Zero*>;
      hence r is FinSequence of {0,1} by A4;
      assume r^<*0*> in dom D;
      assume r^<*1*> in dom D;
      thus D.r = 0 by A1, FUNCOP_1:7;
    end;
    suppose not (r = {} or r = <*0*>);
      then
    A7: r = <*1*> by A3;
      set ZeroOne = {0,1};
      reconsider ZeroOne as non empty set;
      set One = 1;
      One in {0,1} by TARSKI:def 2;
      then reconsider One as Element of ZeroOne;
    A4: <*One*> is FinSequence of ZeroOne;
      r = <*1*> by A7
       .= <*One*>;
      hence r is FinSequence of {0,1};
      assume r^<*0*> in dom D;
      assume r^<*1*> in dom D;
      thus D.r = 0 by A1, FUNCOP_1:7;
    end;
  end;
end;

::: And then we can easily define a `LambdaTerm-like` cluster,
:::  and make a mode `LambdaTerm` out of it.
registration
  cluster LambdaTerm-like for DecoratedTree of NAT;
  existence
  proof
    set D = { {} } --> 0;
    take D;
    thus D is LambdaTerm-like;
  end;
end;

definition
  mode LambdaTerm is LambdaTerm-like DecoratedTree of NAT;
end;

definition
  let v;

  func PreAbstractionTerm v -> LambdaTerm equals
    { {}, <*0*> } --> v;
  coherence
  proof
    set T = { {}, <*0*> };
    reconsider T as Tree;
    set D = T --> v;
    reconsider D as DecoratedTree of NAT;
    D is LambdaTerm-like;
    then reconsider D as LambdaTerm;
    D is LambdaTerm;
    hence { {}, <*0*> } --> v is LambdaTerm;
  end;
end;

definition
  func PreApplicationTerm -> LambdaTerm equals
    { {}, <*0*>, <*1*> } --> 0;
  coherence
  proof
    set T = { {}, <*0*>, <*1*> };
    reconsider T as Tree;
    set D = T --> 0;
    reconsider D as DecoratedTree of NAT;
    D is LambdaTerm-like;
    then reconsider D as LambdaTerm;
    D is LambdaTerm;
    hence { {}, <*0*>, <*1*> } --> 0 is LambdaTerm;
  end;
end;

reserve M,N,P,Q for LambdaTerm;

::: #### Preservation under operations

::: `LambdaTerm`s are preserved under taking subterms, and composing
:::  terms. We'll register this knowledge in the type system.

::: Let Mizar know that `M|r` is also a `LambdaTerm`.
::: The definition of `|` that we are using is the definition
:::  that operates on (and returns) a `DecoratedTree`. Showing
:::  that retricting a `LambdaTerm` produces a `LambdaTerm-like`
:::  result ensures us that the result is a `LambdaTerm`.
registration
  let M be LambdaTerm,
      r be Element of dom M;

  cluster M|r -> LambdaTerm-like;
  coherence
  proof
    thus dom (M|r) is finite proof
      dom M is finite by Def1;
      then (dom M)|r is finite;
      hence thesis by TREES_2:def 10;
    end;

    let p be FinSequence of NAT;
    assume
  A3: p in dom (M|r);
    thus p is FinSequence of {0,1} proof
      dom (M|r) = (dom M)|r by TREES_2:def 10;
      then p in (dom M)|r by A3;
      then r^p in dom M by TREES_1:def 6;
      then r^p is FinSequence of {0,1} by Def1;
      hence thesis by FINSEQ_1:36;
    end;

    :: r^p^<*0*>
    set p0 = p^<*0*>;
    set p1 = p^<*1*>;
    set rp = r^p;
    assume
  A4: p0 in dom (M|r);
    assume
  A9: p1 in dom (M|r);
    thus (M|r).p = 0 proof
    A6: rp^<*0*> in dom M
      proof
        dom (M|r) is Tree-like;
        then p0 in dom (M|r) by A4, TREES_1:21;
        then reconsider p0 as Element of dom (M|r);
        reconsider p0 as Element of (dom M)|r by TREES_2:def 10;
        p0 in (dom M)|r;
        then r^p0 in dom M by TREES_1:def 6;
        hence thesis by FINSEQ_1:32;
      end;
    A7: rp^<*1*> in dom M
      proof
        dom (M|r) is Tree-like;
        then p1 in dom (M|r) by A9, TREES_1:21;
        then reconsider p1 as Element of dom (M|r);
        reconsider p1 as Element of (dom M)|r by TREES_2:def 10;
        p1 in (dom M)|r;
        then r^p1 in dom M by TREES_1:def 6;
        then rp^<*1*> in dom M by FINSEQ_1:32;
        hence thesis by FINSEQ_1:32;
      end;
      rp in dom M by TREES_1:21, A6, A7;
      then M.rp = 0 by A6, A7, Def1;
      then
    A8: M.(r^p) = 0;
      p in (dom M)|r by A3, TREES_2:def 10;
      then (M|r).p = M.(r^p) by TREES_2:def 10;
      hence (M|r).p = 0 by A8, TREES_2:def 10;
    end;
  end;
end;

::: Let Mizar know that `P with-replacement (p,Q)` is also a `LambdaTerm`.
::: First we prove a slightly more general theorem about the ranges of
:::  composed `DecoratedTree`s, and add this knowledge to the type system.
reserve X for set,
        D1,D2 for DecoratedTree,
        p for Element of dom D1;

theorem Th1:
  D1 is X-valued & D2 is Y-valued implies
    D1 with-replacement (p,D2) is (X \/ Y)-valued
proof
  assume
A4: D1 is X-valued;
  assume
A5: D2 is Y-valued;
  set D = D1 with-replacement (p,D2);
  set T = dom D;
  rng D c= X \/ Y
  proof
    let x be set;
    assume x in rng D;
    then ex q being set st [q,x] in D by RELAT_1:def 5;
    then consider q being set such that
  A1: [q,x] in D;
  A2: q in T by A1, RELAT_1:def 4;
    T is Tree by TREES_2:def 8;
    then reconsider q as FinSequence of NAT by A2, TREES_1:19;
  A13: T = dom D1 with-replacement (p, dom D2) by TREES_2:def 11;
    then
  A3: ((not p is_a_prefix_of q & D.q = D1.q) or
      (ex r st r in dom D2 & q = p^r & D.q = D2.r)) by A2, TREES_2:def 11;
    per cases;
    suppose
    A6: (not p is_a_prefix_of q & D.q = D1.q);
      [q,x] in D by A1;
      then D.q = x by A2, FUNCT_1:def 2;
      then
    A7: D1.q = x by A6;
    A12: q in dom D1
      proof
      A14: (q in dom D1 & not p is_a_proper_prefix_of q or
          ex r st r in dom D2 & q = p^r) by A2, A13, TREES_1:def 9;
        per cases;
        suppose q in dom D1 & not p is_a_proper_prefix_of q;
          hence q in dom D1;
        end;
        suppose not (q in dom D1 & not p is_a_proper_prefix_of q);
          then ex r st r in dom D2 & q = p^r by A14;
          then
        A15: p is_a_prefix_of q by TREES_1:1;
          assume not q in dom D1;
          thus contradiction by A6, A15;
        end;
      end;
      [q,x] in D1 by A7, A12, FUNCT_1:def 2;
      then
    A8: x in rng D1 by RELAT_1:def 5;
      rng D1 c= X by A4, RELAT_1:def 19;
      then x in X by A8;
      hence x in (X \/ Y) by XBOOLE_0:def 3;
    end;
    suppose not (not p is_a_prefix_of q & D.q = D1.q);
      then (ex r st r in dom D2 & q = p^r & D.q = D2.r) by A3;
      then consider r such that
    A9: r in dom D2 & q = p^r & D.q = D2.r;
      [q,x] in D by A1;
      then D.q = x by A2, FUNCT_1:def 2;
      then D2.r = x by A9;
      then [r,x] in D2 by A9, FUNCT_1:def 2;
      then
    A11: x in rng D2 by RELAT_1:def 5;
      rng D2 c= Y by A5, RELAT_1:def 19;
      then x in Y by A11;
      hence x in (X \/ Y) by XBOOLE_0:def 3;
    end;
  end;
  hence thesis by RELAT_1:def 19;
end;

registration
  let P,Q be LambdaTerm,
      p be Element of dom P;

  cluster P with-replacement (p,Q) -> NAT-valued;
  coherence
  proof
  A1: P is NAT-valued by Def1;
  A2: Q is NAT-valued by Def1;
    P with-replacement (p,Q) is (NAT \/ NAT)-valued by A1, A2, Th1;
    hence P with-replacement (p,Q) is NAT-valued by XBOOLE_0:def 3;
  end;
end;

reserve p for Element of dom P;

theorem Th2:
  P with-replacement (p,Q) is LambdaTerm-like
proof
  set R = P with-replacement (p,Q);
  thus dom R is finite
  proof
  A1: dom P is finite by Def1;
  A2: dom Q is finite by Def1;
    dom R = (dom P) with-replacement (p,dom Q) by TREES_2:def 11;
    hence thesis by A1, A2;
  end;

  let r;
  assume
A3: r in dom R;
  thus r is FinSequence of {0,1}
  proof
    dom R = (dom P) with-replacement (p,dom Q) by TREES_2:def 11;
    then
  A4: ((r in dom P & not p is_a_proper_prefix_of r) or
      (ex q st q in dom Q & r = p^q)) by A3, TREES_1:def 9;
    per cases;
    suppose (r in dom P & not p is_a_proper_prefix_of r);
      hence r is FinSequence of {0,1} by Def1;
    end;
    suppose not (r in dom P & not p is_a_proper_prefix_of r);
      then (ex q st q in dom Q & r = p^q) by A4;
      then consider q such that
    A5: q in dom Q & r = p^q;
      q is FinSequence of {0,1} by A5, Def1;
      then reconsider q as FinSequence of {0,1};
      p is FinSequence of {0,1} by Def1;
      then reconsider p as FinSequence of {0,1};
      p^q is FinSequence of {0,1};
      hence thesis by A5;
    end;
  end;
  set r0 = r^<*0*>;
  set r1 = r^<*1*>;
  assume
A6: r0 in dom R;
  assume
A7: r1 in dom R;
  
  r in (dom P) with-replacement (p,dom Q) by A3, TREES_2:def 11;
  then
A8: (not p is_a_prefix_of r & R.r = P.r) or
    (ex q st q in dom Q & r = p^q & R.r = Q.q)
      by A3, TREES_2:def 11;
  per cases;
  suppose
  A22: (not p is_a_prefix_of r & R.r = P.r);

  A23: r in dom P
    proof
      assume
    A24: not r in dom P;
      r in (dom P) with-replacement (p,dom Q) by A3, TREES_2:def 11;
      then (r in dom P & not p is_a_proper_prefix_of r) or
           (ex q st q in dom Q & r = p^q)
             by TREES_1:def 9;
      then (ex q st q in dom Q & r = p^q) by A24;
      then consider q such that
    A25: q in dom Q & r = p^q;
      p is_a_prefix_of r by A25, TREES_1:1;
      hence contradiction by A22;
    end;

  A20: r0 in dom P
    proof
      per cases;
      suppose
      A31: r0 = p;
        p in dom P;
        hence r0 in dom P by A31;
      end;
      suppose
      A30: r0 <> p;
        assume
      A26: not r0 in dom P;
      A29: not p is_a_prefix_of r0
        proof
          assume p is_a_prefix_of r0;
          then p is_a_proper_prefix_of r0 by A30, XBOOLE_0:def 8;
          then p is_a_prefix_of r by TREES_1:9;
          hence contradiction by A22;
        end;
        r0 in (dom P) with-replacement (p,dom Q) by A6, TREES_2:def 11;
        then (r0 in dom P & not p is_a_proper_prefix_of r0) or
             (ex q st q in dom Q & r0 = p^q)
               by TREES_1:def 9;
        then (ex q st q in dom Q & r0 = p^q) by A26;
        then consider q such that
      A27: q in dom Q & r0 = p^q;
      A28: p is_a_prefix_of r0 by A27, TREES_1:1;
        hence contradiction by A28, A29;
      end;
    end;

  A21: r1 in dom P :: (exactly the same as for r0)
    proof
      per cases;
      suppose
      A32: r1 = p;
        p in dom P;
        hence r1 in dom P by A32;
      end;
      suppose
      A33: r1 <> p;
        assume
      A34: not r1 in dom P;
      A35: not p is_a_prefix_of r1
        proof
          assume p is_a_prefix_of r1;
          then p is_a_proper_prefix_of r1 by A33, XBOOLE_0:def 8;
          then p is_a_prefix_of r by TREES_1:9;
          hence contradiction by A22;
        end;
        r1 in (dom P) with-replacement (p,dom Q) by A7, TREES_2:def 11;
        then (r1 in dom P & not p is_a_proper_prefix_of r1) or
             (ex q st q in dom Q & r1 = p^q)
               by TREES_1:def 9;
        then (ex q st q in dom Q & r1 = p^q) by A34;
        then consider q such that
      A36: q in dom Q & r1 = p^q;
      A37: p is_a_prefix_of r1 by A36, TREES_1:1;
        hence contradiction by A37, A35;
      end;
    end;

    P.r = 0 by Def1, A20, A21, A23;
    hence R.r = 0 by A22;
  end;
  suppose not (not p is_a_prefix_of r & R.r = P.r);
    then (ex q st q in dom Q & r = p^q & R.r = Q.q) by A8;
    then consider q such that
  A9: q in dom Q and
  A10: r = p^q & R.r = Q.q;

  A11: q^<*0*> in dom Q
    proof
      r0 in (dom P) with-replacement (p,dom Q) by A6, TREES_2:def 11;
      then
    A12: (r0 in dom P & not p is_a_proper_prefix_of r0) or
         (ex q0 st q0 in dom Q & r0 = p^q0)
           by TREES_1:def 9;
      (ex q0 st q0 in dom Q & r0 = p^q0)
      proof
        assume not (ex q0 st q0 in dom Q & r0 = p^q0);
        then
      A15: (r0 in dom P & not p is_a_proper_prefix_of r0) by A12;
        p is_a_prefix_of r by A10, TREES_1:1;
        then p is_a_proper_prefix_of r0 by TREES_1:8;
        hence contradiction by A15;
      end;
      then consider q0 such that
    A13: q0 in dom Q and
    A14: r0 = p^q0;
      p^q0 = r0 by A14
          .= r^<*0*>
          .= (p^q)^<*0*> by A10
          .= p^(q^<*0*>) by FINSEQ_1:32;
      then q0 = q^<*0*> by FINSEQ_1:33;
      hence q^<*0*> in dom Q by A13;
    end;

  A16: q^<*1*> in dom Q :: (exactly the same as for q^<*0*>)
    proof
      r1 in (dom P) with-replacement (p,dom Q) by A7, TREES_2:def 11;
      then
    A17: (r1 in dom P & not p is_a_proper_prefix_of r1) or
         (ex q1 st q1 in dom Q & r1 = p^q1)
           by TREES_1:def 9;
      (ex q1 st q1 in dom Q & r1 = p^q1)
      proof
        assume not (ex q1 st q1 in dom Q & r1 = p^q1);
        then
      A15: (r1 in dom P & not p is_a_proper_prefix_of r1) by A17;
        p is_a_prefix_of r by A10, TREES_1:1;
        then p is_a_proper_prefix_of r1 by TREES_1:8;
        hence contradiction by A15;
      end;
      then consider q1 such that
    A18: q1 in dom Q and
    A19: r1 = p^q1;
      p^q1 = r1 by A19
          .= r^<*1*>
          .= (p^q)^<*1*> by A10
          .= p^(q^<*1*>) by FINSEQ_1:32;
      then q1 = q^<*1*> by FINSEQ_1:33;
      hence q^<*1*> in dom Q by A18;
    end;

    Q.q = 0 by Def1, A9, A11, A16;
    hence R.r = 0 by A10;
  end;
end;

registration
  let P,Q be LambdaTerm,
      p be Element of dom P;

  cluster P with-replacement (p,Q) -> LambdaTerm-like;
  coherence
  proof
    thus thesis by Th2;
  end;
end;

definition
  let P be LambdaTerm,
      p be Element of dom P,
      Q be LambdaTerm;

  redefine func P with-replacement (p,Q) -> LambdaTerm;
  coherence;
end;

::: ### Helper definitions
::: Some helper definitions for working with lambda terms.

::: #### Variable occurences
definition
  let M be LambdaTerm,
      r; :: be Node of M;
  
  pred r is_variable_in M means
    :Def5:
    r in dom M &
    not r^<*0*> in dom M;

  pred r is_abstraction_in M means
    :Def6:
    r in dom M &
    r^<*0*> in dom M & not r^<*1*> in dom M;

  pred r is_application_in M means
    :Def7:
    r in dom M &
    r^<*0*> in dom M & r^<*1*> in dom M;
end;

definition
  let M,r,v;

  pred M,r holds_variable v means
    :Def8:
    r is_variable_in M &
    M.r = n;

  pred M,r abstracts v means
    :Def9:
    r is_abstraction_in M &
    M.r = n;
end;

definition
  let M,v;

  pred M contains_variable v means
    :Def10:
    ex r st M,r holds_variable v;
end;

::: #### Abstraction and application

definition
  let v;

  func Var(v) -> LambdaTerm equals
    :Def12:
    { <*> NAT } --> v;
  coherence;
end;

::: Then we can define abstraction and application
definition
  let v,M;
  
  func Abs(v,M) -> LambdaTerm means
    it,(<*> NAT) abstracts v &
    it|<*0*> = M &
    not <*1*> in dom it;
  existence
  proof
    set e0 = <*0*>;
    dom (PreAbstractionTerm v) = { {}, <*0*> } by FUNCOP_1:13;
    then <*0*> in dom (PreAbstractionTerm v) by TARSKI:def 2;
    then reconsider e0 as Element of dom (PreAbstractionTerm v);
    set D = (PreAbstractionTerm v) with-replacement (e0, M);

    set e = <*> NAT;
  A1: e = {} by FINSEQ_1:def 6;

    take D;
    thus D,e abstracts v
    proof
      thus e is_abstraction_in D;
::>        *51                 *4
      thus D.e = v;
::>              *4
    end;
::    proof
::      thus e is_abstraction_in D;
::::>        *51
::      proof
::        thus e in dom D by A1, TREES_1:22;
::        thus e^<*0*> in dom D;
::::>                         *4
::        thus not e^<*1*> in dom D;
::::>                             *4
::      end;
::    A3: D.(<*> NAT) = v;
::::>                   *4
::      thus thesis by A2, A3, Def9;
::::>                   *144
::    end;

    thus D|<*0*> = M;
::>                *4
    thus not <*1*> in dom D;
::>                       *4
  end;
  uniqueness;
::>        *4
end;

definition
  let M,N;

  func App(M,N) -> LambdaTerm means
    it|<*0*> = M & it|<*1*> = N;
  existence
  proof
    set e0 = <*0*>;
    dom PreApplicationTerm = { {}, <*0*>, <*1*> } by FUNCOP_1:13;
    then <*0*> in dom PreApplicationTerm by ENUMSET1:def 1;
    then reconsider e0 as Element of dom PreApplicationTerm;
    set preD = PreApplicationTerm with-replacement (e0, M);
    preD is LambdaTerm;

    set e1 = <*1*>;
  A1: dom preD = (dom PreApplicationTerm) with-replacement (e0, dom M)
      by TREES_2:def 11;
    dom PreApplicationTerm = { {}, <*0*>, <*1*> } by FUNCOP_1:13;
    then
  A2: <*1*> in dom PreApplicationTerm by ENUMSET1:def 1;
    not e0 is_a_proper_prefix_of e1;
::>                               *4
    then <*1*> in dom preD by A1, A2, TREES_1:def 9;
    then reconsider e1 as Element of dom preD;
    set D = preD with-replacement (e1, N);
    D is LambdaTerm;
    
    take D;
    thus D|<*0*> = M;
::>                *4
    thus D|<*1*> = N;
::>                *4
  end;
  uniqueness;
::>        *4
end;

::: ### Substitution

definition
  let N,M,v;

  redefine func (N,v) <- M -> LambdaTerm;
  coherence
  proof
    set P = (N,v) <- M;
    P is NAT-valued;
    then reconsider P as DecoratedTree of NAT;
    P is LambdaTerm-like
    proof
      :: use FINSET_1:sch 2 or FINSET_1:7 ?
      thus dom P is finite;
::>                      *4
      let r;
      assume r in dom P;
      then
    A1: (r in dom N)
        or (ex q being Node of N, r2 being Node of M st
            q in Leaves dom N & N.q = v & r = q^r2)
        by TREES_4:def 7;
      thus r is FinSequence of {0,1}
      proof
        per cases;
        suppose r in dom N;
          hence r is FinSequence of {0,1} by Def1;
        end;
        suppose not r in dom N;
          then (ex q being Node of N, r2 being Node of M st
            q in Leaves dom N & N.q = v & r = q^r2) by A1;
          then consider q being Node of N,
            r2 being Node of M such that
        A2: q in Leaves dom N and
        A3: N.q = v and
        A4: r = q^r2;
        A5: q is FinSequence of {0,1} by Def1;
        A6: r2 is FinSequence of {0,1} by Def1;
          thus r is FinSequence of {0,1} by A4, A5, A6, FINSEQ_1:75;
        end;
      end;

      assume r^<*0*> in dom P;
      assume r^<*1*> in dom P;
      thus P.r = 0;
::>              *4
    end;
    hence (N,v) <- M is LambdaTerm;
  end;
end;

::: #### Substitution lemma
::: (If I have time...)

theorem
  not P contains_variable v implies
    ::M[v := N][w := P] =
    (((M,v) <- N),w) <- P =
    (((M,w) <- P),v) <- ((N,w) <- P)
    ::M[w := P][v := N[w := P]]
proof
  thus thesis;
::>         *4
end;

::: ### Reduction and conversion

::: First we define one-step toplevel (_shallow_) reduction.

definition
  let P,Q;
  
  :: P === (\x.N)M --> N[x:=M] === Q
  pred P beta->shallow Q means
    ex N,n,M st
      :: P === (\x.N)M
      P = App(Abs(n,N),M) &

      :: Q === N[x:=M]
      Q = (N,n) <- M;
end;

::: Then we close under subterm reduction to get actual one-step beta reduction.

::: Note that I had to use a work-around here, where I have two
:::  set-theoretically identical elements `p` and `q`, but considered
:::  in Mizar as having different types to enable the two `|` operations
:::  to work. I also tried defining something like `Element of (dom M),(dom N)`,
:::  but this is extremely difficult, if not impossible.
definition
  let M,N;

  :: TODO better definition with tree operations ?

  pred M beta-> N means
    ex
      p being Element of dom M,
      q being Element of dom N st
        p = q &
        M|p beta->shallow N|q &
        for q st not p is_a_prefix_of q holds
          [r,x] in M iff [r,x] in N;
end;

::: We close under transitivity and reflexivity
:::  to get full beta reduction.
definition
  let M,N;
  
  pred M beta->* N means
    M = N or
    ex P st M beta-> P & P beta-> N;
end;

::: And then close under symmetry to get beta conversion.
definition
  let M,N;
  
  pred M beta= N means
    M beta->* N or N beta->* M;
end;

::: As a note of victory, let's just define some terms! :)
definition
  func cI -> LambdaTerm equals
    :Def11:
    Abs(0,Var(0));
  coherence;

  func cOne -> LambdaTerm equals
    :Def11:
    Abs(0,Abs(1,App(Var(0),Var(1))));
  coherence;

  func cK -> LambdaTerm equals
    :Def13:
    Abs(0,Abs(1,Var(0)));
  coherence;

  func cK* -> LambdaTerm equals
    :Def14:
    Abs(0,Abs(1,Var(1)));
  coherence;

  func cDelta -> LambdaTerm equals
    :Def15:
    Abs(0,App(Var(0),Var(0)));
  coherence;

  func cY -> LambdaTerm equals
    :Def17:
    Abs(1,App(
      Abs(0,App(Var(1),App(Var(0),Var(0)))),
      Abs(0,App(Var(1),App(Var(0),Var(0))))
    ));
  coherence;
end;

definition
  func cOmega -> LambdaTerm equals
    :Def16:
    App(cDelta,cDelta);
  coherence;
end;

::>
::> 4: This inference is not accepted
::> 51: Invalid conclusion
